

#include "headers/vcspalette.h"

namespace oa
{
    namespace vcs
    {

        const uint32_t entries_Ntsc [] = {
            0x000000, 0x444400, 0x702080, 0x841800, 0x880000, 0x78005C, 0x480088, 0x140084, //0
            0x000088, 0x00187C, 0x002C5C, 0x003C2C, 0x003C00, 0x143800, 0x2C3000, 0x442800,
            0x000000, 0x444400, 0x702080, 0x841800, 0x880000, 0x78005C, 0x480088, 0x140084, //1 dupe of 0
            0x000088, 0x00187C, 0x002C5C, 0x003C2C, 0x003C00, 0x143800, 0x2C3000, 0x442800,
            0x404040, 0x646410, 0x844414, 0x983418, 0x9C2020, 0x8C2074, 0x602090, 0x302098, //2
            0x1C209C, 0x1C3890, 0x1C4C78, 0x1C5C48, 0x206C20, 0x345C1C, 0x4C501C, 0x644818,
            0x404040, 0x646410, 0x844414, 0x983418, 0x9C2020, 0x8C2074, 0x602090, 0x302098, //3 dupe of 2
            0x1C209C, 0x1C3890, 0x1C4C78, 0x1C5C48, 0x206C20, 0x345C1C, 0x4C501C, 0x644818,
            0x6C6C6C, 0x848424, 0x985C28, 0xAC5030, 0xB03C3C, 0xA03C88, 0x783CA4, 0x4C3CAC, //4
            0x384080, 0x3854A8, 0x386890, 0x387C64, 0x407C40, 0x507C38, 0x687034, 0x846830,
            0x6C6C6C, 0x848424, 0x985C28, 0xAC5030, 0xB03C3C, 0xA03C88, 0x783CA4, 0x4C3CAC, //5 dupe of 4
            0x384080, 0x3854A8, 0x386890, 0x387C64, 0x407C40, 0x507C38, 0x687034, 0x846830,
            0x909090, 0xA0A032, 0xAC783C, 0xC06848, 0xC05858, 0xB0589C, 0x8C58B8, 0x6858C0, //6
            0x505CC0, 0x5070BC, 0x5085AC, 0x509C80, 0x5C9C5C, 0x6C9850, 0x848C4C, 0xA08444, 
            0x909090, 0xA0A032, 0xAC783C, 0xC06848, 0xC05858, 0xB0589C, 0x8C58B8, 0x6858C0, //7 dupe of 6
            0x505CC0, 0x5070BC, 0x5085AC, 0x509C80, 0x5C9C5C, 0x6C9850, 0x848C4C, 0xA08444,
            0xB0B0B0, 0xB8B840, 0xBC8C4C, 0xD0805C, 0xD07070, 0xC070B0, 0xA070CC, 0x7C70D0, //8
            0x6874D0, 0x6888CC, 0x589CC0, 0x68B494, 0x74B474, 0x84B468, 0x9CA864, 0xB89C58,
            0xB0B0B0, 0xB8B840, 0xBC8C4C, 0xD0805C, 0xD07070, 0xC070B0, 0xA070CC, 0x7C70D0, //9 dupe of 8
            0x6874D0, 0x6888CC, 0x589CC0, 0x68B494, 0x74B474, 0x84B468, 0x9CA864, 0xB89C58,
            0xC8C8C8, 0xD0D050, 0xCCA05C, 0xE09470, 0xE08888, 0xD084C0, 0xB484DC, 0x9488E0, //A
            0x7C8CE0, 0x7C9CDC, 0x7CB4D4, 0x7CD0AC, 0x8CD08C, 0x9CCC7C, 0xB4C078, 0xD0B46C,
            0xC8C8C8, 0xD0D050, 0xCCA05C, 0xE09470, 0xE08888, 0xD084C0, 0xB484DC, 0x9488E0, //B dupe of A
            0x7C8CE0, 0x7C9CDC, 0x7CB4D4, 0x7CD0AC, 0x8CD08C, 0x9CCC7C, 0xB4C078, 0xD0B46C,
            0xDCDCDC, 0xE8E85C, 0xDCB468, 0xECA880, 0xECA0A0, 0xDC9CD0, 0xC49CEC, 0xA9A0EC, //C
            0x90A4EC, 0x90B4EC, 0x90CCE8, 0x90E4C0, 0xA4E4A4, 0xB4E490, 0xCCD488, 0xE8CC7C,
            0xDCDCDC, 0xE8E85C, 0xDCB468, 0xECA880, 0xECA0A0, 0xDC9CD0, 0xC49CEC, 0xA9A0EC, //D dupe of C
            0x90A4EC, 0x90B4EC, 0x90CCE8, 0x90E4C0, 0xA4E4A4, 0xB4E490, 0xCCD488, 0xE8CC7C,
            0xECECEC, 0xFCFC68, 0xECC878, 0xFCBC94, 0xFCB4B4, 0xECB0E0, 0xD4B0FC, 0xBCB4FC, //E
            0xA4B8FC, 0xA4C8FC, 0xA4E0FC, 0xA4FCD4, 0xB8FCB8, 0xC8FCA4, 0xE0EC9C, 0xFCE08C,
            0xECECEC, 0xFCFC68, 0xECC878, 0xFCBC94, 0xFCB4B4, 0xECB0E0, 0xD4B0FC, 0xBCB4FC, //F dupe of E
            0xA4B8FC, 0xA4C8FC, 0xA4E0FC, 0xA4FCD4, 0xB8FCB8, 0xC8FCA4, 0xE0EC9C, 0xFCE08C
        };
        
        VcsPalette:: VcsPalette()
        {
            SetupPalettes();
        }

        void VcsPalette::SetPaletteChoice(Palette palette)
        {
            paletteChoice_ = palette;
        }

        QColor VcsPalette::GetColor(uint8_t position)
        {
            return GetColor(position, paletteChoice_);
        }

        QColor VcsPalette::GetColor(uint8_t position, Palette palette)
        {
            QColor col = palette_[palette][position];
            return palette_[palette][position];
        }

        void VcsPalette::SetupPalettes()
        {
            SetupPalette(entries_Ntsc, Palette::Palette_Ntsc);
        }

        void VcsPalette::SetupPalette(const uint32_t entries[], Palette palette)
        {
            for (int index=0; index<256; index++)
            {
                uint32_t entry = entries[index];
                int8_t red = (entry & 0xFF0000) >> 16;
                int8_t green = (entry & 0x00FF00) >> 8;
                int8_t blue = entry & 0x0000FF;
                SetColor(red, green, blue, index, palette);
            }
        }
        
        void VcsPalette::SetColor(uint8_t red, uint8_t green, uint8_t blue, uint8_t position, Palette palette)
        {            
            palette_[static_cast<int>(palette)][position] = QColor(red,green,blue).rgb();
        }

    }
}
