

#include "headers/vcspalette.h"

namespace oa
{
    namespace vcs
    {

        const uint32_t entries_Ntsc [] = {
            0x000000, 0x404040, 0x6C6C6C, 0x909090, 0xB0B0B0, 0xC8C8C8, 0xDCDCDC, 0xECECEC,
            0x444400, 0x646410, 0x848424, 0xA0A032, 0xB8B840, 0xD0D050, 0xE8E85C, 0xFCFC68,
            0x702080, 0x844414, 0x985C28, 0xAC783C, 0xBC8C4C, 0xCCA05C, 0xDCB468, 0xECC878,
            0x841800, 0x983418, 0xAC5030, 0xC06848, 0xD0805C, 0xE09470, 0xECA880, 0xFCBC94,
            0x880000, 0x9C2020, 0xB03C3C, 0xC05858, 0xD07070, 0xE08888, 0xECA0A0, 0xFCB4B4,
            0x78005C, 0x8C2074, 0xA03C88, 0xB0589C, 0xC070B0, 0xD084C0, 0xDC9CD0, 0xECB0E0,
            0x480088, 0x602090, 0x783CA4, 0x8C58B8, 0xA070CC, 0xB484DC, 0xC49CEC, 0xD4B0FC,
            0x140084, 0x302098, 0x4C3CAC, 0x6858C0, 0x7C70D0, 0x9488E0, 0xA9A0EC, 0xBCB4FC,
            0x000088, 0x1C209C, 0x384080, 0x505CC0, 0x6874D0, 0x7C8CE0, 0x90A4EC, 0xA4B8FC,
            0x00187C, 0x1C3890, 0x3854A8, 0x5070BC, 0x6888CC, 0x7C9CDC, 0x90B4EC, 0xA4C8FC,
            0x002C5C, 0x1C4C78, 0x386890, 0x5085AC, 0x589CC0, 0x7CB4D4, 0x90CCE8, 0xA4E0FC,
            0x003C2C, 0x1C5C48, 0x387C64, 0x509C80, 0x68B494, 0x7CD0AC, 0x90E4C0, 0xA4FCD4,
            0x003C00, 0x206C20, 0x407C40, 0x5C9C5C, 0x74B474, 0x8CD08C, 0xA4E4A4, 0xB8FCB8,
            0x143800, 0x345C1C, 0x507C38, 0x6C9850, 0x84B468, 0x9CCC7C, 0xB4E490, 0xC8FCA4,
            0x2C3000, 0x4C501C, 0x687034, 0x848C4C, 0x9CA864, 0xB4C078, 0xCCD488, 0xE0EC9C,
            0x442800, 0x644818, 0x846830, 0xA08444, 0xB89C58, 0xD0B46C, 0xE8CC7C, 0xFCE08C
        };
        
        const uint32_t entries_Pal [] = {
            0x000000, 0x282828, 0x505050, 0x747474, 0x949494, 0xB4B4B4, 0xD0D0D0, 0xECECEC,
            0x000000, 0x282828, 0x505050, 0x747474, 0x949494, 0xB4B4B4, 0xD0D0D0, 0xECECEC,
            0x805800, 0x947020, 0xA8843C, 0xBC9C58, 0xCCAC70, 0xDCC084, 0xECD09C, 0xFCE0B0,
            0x445C00, 0x5C7820, 0x74903C, 0xBCAC58, 0xA0C070, 0xB0D484, 0xC4E89C, 0xD4FCB0,
            0x703400, 0x885020, 0xA0683C, 0xB48458, 0xC89870, 0xDCAC84, 0xECC09C, 0xFCD4B0,
            0x006414, 0x208034, 0x3C9850, 0x58B06C, 0x70C484, 0x84D89C, 0x9CE8B4, 0xB0FCC8,
            0x700014, 0x882034, 0xA03C50, 0xB4586C, 0xC87084, 0xDC849C, 0xEC9CB4, 0xFCB0C8,
            0x005C5C, 0x207474, 0x3C8C8C, 0x58A4A4, 0x70B8B8, 0x84C8C8, 0x9CDCDC, 0xB0ECEC,
            0x70005C, 0x842074, 0x943C88, 0xA8589C, 0xB470B0, 0xC484C0, 0xD09CD0, 0xE0B0E0,
            0x003C70, 0x1C5888, 0x3874A0, 0x508CB4, 0x68A4C8, 0x7CB7DC, 0x90CCEC, 0xA4E0FC,
            0x580070, 0x6C2088, 0x803CA0, 0x9458B4, 0xA470C8, 0xB484DC, 0xC49CEC, 0xD4B0FC,
            0x002070, 0x1C3C88, 0x3858A0, 0x5074B4, 0x6888C8, 0x7CA0DC, 0x90B4EC, 0xA4C8FC,
            0x3C0080, 0x542094, 0x6C3CA8, 0x8058BC, 0x9470CC, 0xA884DC, 0xB89CEC, 0xC8B0FC,
            0x000088, 0x20209C, 0x3C3CB0, 0x5858C0, 0x7070D0, 0x8484E0, 0x9C9CEC, 0xB0B0FC,
            0x000000, 0x282828, 0x505050, 0x747474, 0x949494, 0xB4B4B4, 0xD0D0D0, 0xECECEC,
            0x000000, 0x282828, 0x505050, 0x747474, 0x949494, 0xB4B4B4, 0xD0D0D0, 0xECECEC
        };
        
        const uint32_t entries_Secam [] = {
            0x000000, 0x2121FF, 0xF03C79, 0xFF50FF, 0x7FFF00, 0x7FFFFF, 0xFFFF3F, 0xFFFFFF,
            0x000000, 0x2121FF, 0xF03C79, 0xFF50FF, 0x7FFF00, 0x7FFFFF, 0xFFFF3F, 0xFFFFFF,
            0x000000, 0x2121FF, 0xF03C79, 0xFF50FF, 0x7FFF00, 0x7FFFFF, 0xFFFF3F, 0xFFFFFF,
            0x000000, 0x2121FF, 0xF03C79, 0xFF50FF, 0x7FFF00, 0x7FFFFF, 0xFFFF3F, 0xFFFFFF,
            0x000000, 0x2121FF, 0xF03C79, 0xFF50FF, 0x7FFF00, 0x7FFFFF, 0xFFFF3F, 0xFFFFFF,
            0x000000, 0x2121FF, 0xF03C79, 0xFF50FF, 0x7FFF00, 0x7FFFFF, 0xFFFF3F, 0xFFFFFF,
            0x000000, 0x2121FF, 0xF03C79, 0xFF50FF, 0x7FFF00, 0x7FFFFF, 0xFFFF3F, 0xFFFFFF,
            0x000000, 0x2121FF, 0xF03C79, 0xFF50FF, 0x7FFF00, 0x7FFFFF, 0xFFFF3F, 0xFFFFFF,
            0x000000, 0x2121FF, 0xF03C79, 0xFF50FF, 0x7FFF00, 0x7FFFFF, 0xFFFF3F, 0xFFFFFF,
            0x000000, 0x2121FF, 0xF03C79, 0xFF50FF, 0x7FFF00, 0x7FFFFF, 0xFFFF3F, 0xFFFFFF,
            0x000000, 0x2121FF, 0xF03C79, 0xFF50FF, 0x7FFF00, 0x7FFFFF, 0xFFFF3F, 0xFFFFFF,
            0x000000, 0x2121FF, 0xF03C79, 0xFF50FF, 0x7FFF00, 0x7FFFFF, 0xFFFF3F, 0xFFFFFF,
            0x000000, 0x2121FF, 0xF03C79, 0xFF50FF, 0x7FFF00, 0x7FFFFF, 0xFFFF3F, 0xFFFFFF,
            0x000000, 0x2121FF, 0xF03C79, 0xFF50FF, 0x7FFF00, 0x7FFFFF, 0xFFFF3F, 0xFFFFFF,
            0x000000, 0x2121FF, 0xF03C79, 0xFF50FF, 0x7FFF00, 0x7FFFFF, 0xFFFF3F, 0xFFFFFF,
            0x000000, 0x2121FF, 0xF03C79, 0xFF50FF, 0x7FFF00, 0x7FFFFF, 0xFFFF3F, 0xFFFFFF
        };
        
        VcsPalette:: VcsPalette(VcsConsoleType *vcsConsoleType)
        {
            vcsConsoleType_ = vcsConsoleType;
            SetupPalettes();
        }

        QColor VcsPalette::GetColor(uint8_t position)
        {
            uint8_t palletteChoice = 0; // default NTSC
            if (vcsConsoleType_->GetVideoType() == PAL)
            {
                palletteChoice = 1;
            }
            else if (vcsConsoleType_->GetVideoType() == SECAM)
            {
                palletteChoice = 2;
            }
            position >>= 1;
            return palette_[palletteChoice][position];
        }

        void VcsPalette::SetupPalettes()
        {
            SetupPalette(entries_Ntsc, 0);
            SetupPalette(entries_Pal, 1);
            SetupPalette(entries_Secam, 2);
        }

        void VcsPalette::SetupPalette(const uint32_t entries[], uint8_t palette)
        {
            for (int index=0; index<128; index++)
            {
                uint32_t entry = entries[index];
                int8_t red = (entry & 0xFF0000) >> 16;
                int8_t green = (entry & 0x00FF00) >> 8;
                int8_t blue = entry & 0x0000FF;
                SetColor(red, green, blue, index, palette);
            }
        }
        
        void VcsPalette::SetColor(uint8_t red, uint8_t green, uint8_t blue, uint8_t position, uint8_t palette)
        {            
            palette_[static_cast<int>(palette)][position] = QColor(red,green,blue).rgb();
        }

    }
}
